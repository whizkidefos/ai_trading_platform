from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import numpy as np

from alpha_vantage.timeseries import TimeSeries
import pandas as pd
from django.conf import settings


# Add exponential moving average (EMA)
def add_technical_indicators(data):
    data['SMA_5'] = data['4. close'].rolling(window=5).mean()  # Simple moving average (5 periods)
    data['EMA_10'] = data['4. close'].ewm(span=10, adjust=False).mean()  # Exponential moving average (10 periods)
    
    # Relative strength index (RSI)
    delta = data['4. close'].diff(1)
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = pd.Series(gain).rolling(window=14).mean()
    avg_loss = pd.Series(loss).rolling(window=14).mean()
    rs = avg_gain / avg_loss
    data['RSI'] = 100 - (100 / (1 + rs))
    
    return data.dropna()

# Prepare the data for training
def prepare_data(data):
    data = add_technical_indicators(data)

    # Drop rows with NaN values
    data = data.dropna()

    # Features for training (SMA, EMA, RSI)
    X = data[['SMA_5', 'EMA_10', 'RSI']]
    y = np.where(data['4. close'].shift(-1) > data['4. close'], 1, 0)  # Target: 1 = Buy, 0 = Sell

    return train_test_split(X, y, test_size=0.3, random_state=42)


# Simple function to create moving averages
def add_moving_average(data, window=5):
    data['SMA'] = data['4. close'].rolling(window=window).mean()
    return data

def prepare_data(data):
    # Feature engineering: add moving average, price differences, etc.
    data = add_moving_average(data)
    
    # Drop rows with NaN values (generated by rolling mean)
    data = data.dropna()

    # Features and target (let's assume target is whether the price will go up or down)
    X = data[['SMA']]  # Feature: Simple Moving Average
    y = np.where(data['4. close'].shift(-1) > data['4. close'], 1, 0)  # Target: 1 = Buy, 0 = Sell

    return train_test_split(X, y, test_size=0.3, random_state=42)

def train_model(data):
    X_train, X_test, y_train, y_test = prepare_data(data)

    # Initialize a random forest classifier
    model = RandomForestClassifier(n_estimators=100)

    # Train the model
    model.fit(X_train, y_train)

    # Model accuracy on test data
    accuracy = model.score(X_test, y_test)
    print(f"Model accuracy: {accuracy:.2f}")

    return model


# Get the most recent market data and make a trade decision
def make_trade_prediction(model, data):
    data = add_technical_indicators(data)
    recent_data = data[['SMA_5', 'EMA_10', 'RSI']].tail(1)
    
    prediction = model.predict(recent_data)

    return 'buy' if prediction == 1 else 'sell'


# Fetch market data from Alpha Vantage
def get_market_data(asset='AAPL'):
    ts = TimeSeries(key=settings.ALPHA_VANTAGE_API_KEY, output_format='pandas')
    data, _ = ts.get_intraday(symbol=asset, interval='60min', outputsize='full')
    return data